const $p = require('./index');

/* Вот есть у нас функция такая вот, мало кода и хороша читаемость */
function testFunction(numberParam, stringParam) {
    return stringParam + '(' + numberParam + ')';
}
/* И вот хочется нам кидать исключение если какой-то Вася неверные параметры передаёт */
/* неужели нужна засрать код функции всякими проверками??? */



/* А может попробовать декларативно описать параметры? */
/* И обернуть из другой функцией, и от туда вызвать оригинальную... */
/* И это даже оказалось не так затратно по времени */
testFunction = testFunction.$p(
    $p.isNumber().isPositive(),
    $p.isString().min(3).max(5),

    /* И тут я понял что можно добавить профайлинг функции, что смотреть что с памятью и как
    быстро она вообще работает в разных ситуациях */
    {
        profile: {
            memory: true,
            every: true /* будет записывать данных о каждом вызове */
        }
    }
);

for (let i = 0; i < 32; ++i) {
    testFunction(3, 'four');
}

/* наглядно */
console.log(testFunction.profile.print());

/* а это кидает ошибку, так как первый параметр должен быть положителен */
// testFunction(-1, 'four');